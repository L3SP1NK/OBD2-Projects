[GaugeConfigurations]
gaugeCategory = "VE Analyze Gauges"

    avgO2CorrGaugeAutoTune = avgO2Corr,   "Average O2 Corr",    "%",      50,   150,     90,    99,  101,  110, 1, 1

    avgAutoTuneLambda      = avgLambda,       "Average Lambda",    "",      0.5,  1.5,     0.7,  0.85,  1.1, 1.15, 3, 3
    loadGauge              =      Load,            "Fuel Load",    {bitStringValue(LdAxisScale_Label, !LKUP_PARAMETER ?  LOAD_AXIS_SCALE : 2)},       MAP1_LOAD24_AXIS[0],  MAP1_LOAD24_AXIS[23],     -10000,    -10000,   100000,   100000, 1, 1

[TableEditor]
   ;----------------------------------------------------------------------------
   ; Fuel Table1
   ;----------------------------------------------------------------------------
   table  = vealTable1Tbl,      vealTable1Map,      "Fuel Table 1"
   xyLabels = "RPM",  {Load bitStringValue(LdAxisScale_Label, !LKUP_PARAMETER ?  LOAD_AXIS_SCALE : 2) }

   xBins  = MAP1_RPM24_AXIS,        FILT_RPM
   yBins  = MAP1_LOAD24_AXIS,       Load
   zBins  = VOL_EFF_TB1

   upDownLabel = "UP Label", "Down Label" ; labels for the 3D view
   gridOrient  = 250, 0, 340              ; Rotation of grid in degrees.

   ;----------------------------------------------------------------------------
   ; Fuel Table2
   ;----------------------------------------------------------------------------
   table  = vealTable2Tbl,      vealTable2Map,      "Fuel Table 2"
   xyLabels = "RPM",  {Load bitStringValue(LdAxisScale_Label, !LKUP_PARAMETER ?  LOAD_AXIS_SCALE : 2) }
   xBins  = MAP2_RPM24_AXIS,        FILT_RPM
   yBins  = MAP2_LOAD24_AXIS,       Load
   zBins  = VOL_EFF_TB2

   upDownLabel = "UP Label", "Down Label" ; labels for the 3D view
   gridOrient  = 250, 0, 340              ; Rotation of grid in degrees.

   
   ;----------------------------------------------------------------------------
   ; Fuel Table3
   ;----------------------------------------------------------------------------
   table  = vealTable3Tbl,      vealTable3Map,      "Fuel Table 3"
   xyLabels = "RPM",  {Load bitStringValue(LdAxisScale_Label, !LKUP_PARAMETER ?  LOAD_AXIS_SCALE : 2) }
   xBins  = MAP3_RPM24_AXIS,        FILT_RPM
   yBins  = MAP3_LOAD24_AXIS,       Load
   zBins  = VOL_EFF_TB3

   upDownLabel = "UP Label", "Down Label" ; labels for the 3D view
   gridOrient  = 250, 0, 340              ; Rotation of grid in degrees.

   ;----------------------------------------------------------------------------
   ; Fuel Table4
   ;----------------------------------------------------------------------------
   table  = vealTable4Tbl,      vealTable4Map,      "Fuel Table 4"
   xyLabels = "RPM",  {Load bitStringValue(LdAxisScale_Label, !LKUP_PARAMETER ?  LOAD_AXIS_SCALE : 2) }
   xBins  = MAP4_RPM24_AXIS,        FILT_RPM
   yBins  = MAP4_LOAD24_AXIS,       Load
   zBins  = VOL_EFF_TB4

   upDownLabel = "UP Label", "Down Label" ; labels for the 3D view
   gridOrient  = 250, 0, 340              ; Rotation of grid in degrees.


[OutputChannels]
    ;OutputChannels have to basic forms:
    ; 1) Controller Channels - values contained in the runtime data stream recieved from the controller.
    ; 2) Expression based Channels - new channels based on any other channels or Constant using 
    ;    mathematical operations and TunerStudio functions.
    ; Type one are primarily used by Firmware developers, type 2 can easily be user extensions.
    ;
    ; Type 1 format for scalar:
    ; channelName      = scalar, dataType,    offset, "Units",   scale, translate
    ;   channelName can be any alphanumeric string. It must start with a letter and contain no special characters or white spaces.
    ;   dataType will be U08, S08, U16, S16, U16, S32 or F32. For F32
    ;   offset - the index of the 1st byte in the read datastream, this can be numeric or key words nextOffset and lastOffset
    ;   scale and translate will be applied to the raw value using the standard formulas: 
    ;      msValue   = userValue / scale - translate
    ;      userValue = (msValue + translate) * scale
    ;   Also of note, scale and translate can be expressions, units can use String function expressions
    ; Example:
    ;   seconds          = scalar, U16,    0, "s",   1.000, 0.0
    ;
    ; Type 1 format for paramClass bit 
    ;   channelName = bits, dataType, offset, bitsOfInterest
    ; Examples:
    ;   ready            = bits,   U08,   11, [0:0]
    ;   crank            = bits,   U08,   11, [1:1]
    ;   startw           = bits,   U08,   11, [2:2]
    ;   warmup           = bits,   U08,   11, [3:3]
    ;   tpsaccaen        = bits,   U08,   11, [4:4]
    ;   tpsaccden        = bits,   U08,   11, [5:5]
    ;
    ; 6 bit fields defined from 1 byte at offset 11. 
    ; the bits of interest are described in the format [n:m] where n is the starting bit and m the last bit.
    ; in the above examples, n=m so each channel is a single bit.
    ;
    ;
    ; Type 2 format:
    ; channelName = { someExpression }, "Units"
    ; someExpression can be made up of any set of constants and OutputChannels using any 
    ; of the TunerStudio operators and functions. 
    ; 
    ; For more information on TunerStudio functions, see:
    ; http://tunerstudio.com/index.php/manuals/88-math-parser-functions
    ;------------------------------------------------------------------------------------------

    ;channelName      =  class,   dataType,   offset,     "Units",     scale,       translate
    ;------------        -------  ---------   -------     --------       ------       ---------

     avgRIMLambda4               = { (RIM_LAMBDA_CYL_1 + RIM_LAMBDA_CYL_2 + RIM_LAMBDA_CYL_3 + RIM_LAMBDA_CYL_4) / 4 }, "", hidden
     avgRIMLambda6               = { (RIM_LAMBDA_CYL_1 + RIM_LAMBDA_CYL_2 + RIM_LAMBDA_CYL_3 + RIM_LAMBDA_CYL_4 + RIM_LAMBDA_CYL_5 + RIM_LAMBDA_CYL_6) / 6 }, "", hidden
     avgRIMLambda8               = { (RIM_LAMBDA_CYL_1 + RIM_LAMBDA_CYL_2 + RIM_LAMBDA_CYL_3 + RIM_LAMBDA_CYL_4 + RIM_LAMBDA_CYL_5 + RIM_LAMBDA_CYL_6 + RIM_LAMBDA_CYL_7 + RIM_LAMBDA_CYL_8) / 8 }, "", hidden
     avgRIMLambda                = { GENERIC_NUM_CYLINDERS == 8 ? avgRIMLambda8 : GENERIC_NUM_CYLINDERS == 6 ? avgRIMLambda6 : GENERIC_NUM_CYLINDERS == 4 ? avgRIMLambda4 : 1.0 }, "", { O2_CORR_STRATEGY = 2 }
     avgBasicLambda              = { ( minValue(LO2_LAMBDA) > 0.95 && maxValue(LO2_LAMBDA) < 1.05 ) ? RO2_LAMBDA : (LO2_LAMBDA + RO2_LAMBDA) / 2 }, "", { O2_CORR_STRATEGY = 1 }
     avgLambda                   = { O2_CORR_STRATEGY = 2 ? avgRIMLambda : O2_CORR_STRATEGY = 1 ? avgBasicLambda : 1.0 }, ""
     
     avgRIMCorr4               = { (LAMBDA_CORR_CYL_1 + LAMBDA_CORR_CYL_2 + LAMBDA_CORR_CYL_3 + LAMBDA_CORR_CYL_4) / 4 }, "", hidden
     avgRIMCorr6               = { (LAMBDA_CORR_CYL_1 + LAMBDA_CORR_CYL_2 + LAMBDA_CORR_CYL_3 + LAMBDA_CORR_CYL_4 + LAMBDA_CORR_CYL_5 + LAMBDA_CORR_CYL_6) / 6 }, "", hidden
     avgRIMCorr8               = { (LAMBDA_CORR_CYL_1 + LAMBDA_CORR_CYL_2 + LAMBDA_CORR_CYL_3 + LAMBDA_CORR_CYL_4 + LAMBDA_CORR_CYL_5 + LAMBDA_CORR_CYL_6 + LAMBDA_CORR_CYL_7 + LAMBDA_CORR_CYL_8) / 8 }, "", hidden
     avgRIMCorr                = { GENERIC_NUM_CYLINDERS == 8 ? avgRIMCorr8 : GENERIC_NUM_CYLINDERS == 6 ? avgRIMCorr6 : GENERIC_NUM_CYLINDERS == 4 ? avgRIMCorr4 : 1.0 }, "", { O2_CORR_STRATEGY = 2 }
     avgBasicCorr              = { ( minValue(LO2_CORR) > 0.95 && maxValue(LO2_CORR) < 1.05 ) ? RO2_CORR : (LO2_CORR + RO2_CORR) / 2 }, "", { O2_CORR_STRATEGY = 1 }
     avgO2Corr                 = { O2_CORR_STRATEGY = 2 ? avgRIMCorr : O2_CORR_STRATEGY = 1 ? avgBasicCorr : 1.0 }, ""
     
     afrTarget                   = { LAM_TARG * STOICH_FUEL_RATIO }, ":1"
     AFR_CALC                    = { avgLambda *  STOICH_FUEL_RATIO }, ":1"
     afrError                    = { AFR_CALC - afrTarget}, ":1"



[VeAnalyze]
    ;    tableName,  lambdaTargetTableName, lambdaChannel, egoCorrectionChannel, activeCondition
     veAnalyzeMap = vealTable1Tbl, LambdaTable1Tbl, avgLambda, avgO2Corr, { (MAP_INDEX_MODE >= 2) || ((MAP_INDEX_MODE == 0) && (SELECTED_MANUAL_MAP = 1)) || ((MAP_INDEX_MODE == 1) && (FSL_INDEX == 0)) || (FSL_INDEX_DAQ == 1) }

         lambdaTargetTables = LambdaTable1Tbl, LambdaTable2Tbl, LambdaTable3Tbl, LambdaTable4Tbl, afrTSCustom
         
         ; Optional Lambda targets to over-ride the afr table lookups
         lambdaTargetChannels = LAM_TARG
         
         ; All Available ecoCorrectionChannels
         egoCorrectionChannels = avgO2Corr, RO2_CORR, LO2_CORR, avgRIMCorr, LAMBDA_CORR_CYL_1, LAMBDA_CORR_CYL_2, LAMBDA_CORR_CYL_3, LAMBDA_CORR_CYL_4, LAMBDA_CORR_CYL_5, LAMBDA_CORR_CYL_6, LAMBDA_CORR_CYL_7, LAMBDA_CORR_CYL_8
         

       ; filter =  Name,        "DisplayName", outputChannel, operator, defaultVal, userAdjustable
        ;filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
        ;filter = maxRPMFilter, "Maximum RPM", rpm,           >       , 18000,    , true 
       
         filter = std_xAxisMin ; Auto build with appropriate axis channels
         filter = std_xAxisMax ; Auto build with appropriate axis channels
         filter = std_yAxisMin ; Auto build with appropriate axis channels
         filter = std_yAxisMax ; Auto build with appropriate axis channels

         filter = std_DeadLambda ; Auto build

         filter = minCltFilter, "Minimum CLT", TCLT_F_FILT,       <       , 160,      , true

         ;;filter = std_Expression, "Accel Enrichment"    , { abs(MAP_FILT - historicalValue(MAP_FILT, 50)) > 10 }, false
         filter = std_Expression, "Accel Enrichment"    , { ASYNC_PULSE_BCP > 0   || historicalValue(ASYNC_PULSE_BCP , 5) > 0}, false

         ; this works, just another way to skin a cat
         filter = overrunFilter,     "Overrun"         ,   INJ_GPW_AVE,       <, 0.5,     false
         filter = twoStepActive,     "TWO Step Active" , TWO_STEP_FILT,       >,   0,     false
         filter = threeStepActive, "Three Step Active" , THREE_STEP_FILT,     >,   0,     false
 
         filter = std_Custom ; Standard Custom Expression Filter.
         ;filter = std_Expression, "Table Inactive"    , { (status1 & 0b00100000)}, false


    ;    tableName,  lambdaTargetTableName, lambdaChannel, egoCorrectionChannel, activeCondition
     veAnalyzeMap = vealTable2Tbl, LambdaTable2Tbl, avgLambda, avgO2Corr, {(MAP_INDEX_MODE >= 2)|| ((MAP_INDEX_MODE == 0) && (SELECTED_MANUAL_MAP = 2)) || ((MAP_INDEX_MODE == 1) && (FSL_INDEX == 1)) || (FSL_INDEX_DAQ == 2) }

         lambdaTargetTables = LambdaTable1Tbl, LambdaTable2Tbl, LambdaTable3Tbl, LambdaTable4Tbl, afrTSCustom
         
         ; Optional Lambda targets to over-ride the afr table lookups
         lambdaTargetChannels = LAM_TARG
         
         ; All Available ecoCorrectionChannels
         egoCorrectionChannels = avgO2Corr, RO2_CORR, LO2_CORR, avgRIMCorr, LAMBDA_CORR_CYL_1, LAMBDA_CORR_CYL_2, LAMBDA_CORR_CYL_3, LAMBDA_CORR_CYL_4, LAMBDA_CORR_CYL_5, LAMBDA_CORR_CYL_6, LAMBDA_CORR_CYL_7, LAMBDA_CORR_CYL_8
         

       ; filter =  Name,        "DisplayName", outputChannel, operator, defaultVal, userAdjustable
        ;filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
        ;filter = maxRPMFilter, "Maximum RPM", rpm,           >       , 18000,    , true 
       
         filter = std_xAxisMin ; Auto build with appropriate axis channels
         filter = std_xAxisMax ; Auto build with appropriate axis channels
         filter = std_yAxisMin ; Auto build with appropriate axis channels
         filter = std_yAxisMax ; Auto build with appropriate axis channels

         filter = std_DeadLambda ; Auto build

         filter = minCltFilter, "Minimum CLT", TCLT_F_FILT,       <       , 160,      , true

         ;;filter = std_Expression, "Accel Enrichment"    , { abs(MAP_FILT - historicalValue(MAP_FILT, 50)) > 10 }, false
         filter = std_Expression, "Accel Enrichment"    , { ASYNC_PULSE_BCP > 0   || historicalValue(ASYNC_PULSE_BCP , 5) > 0}, false

         ; this works, just another way to skin a cat
         filter = overrunFilter,              "Overrun",     INJ_GPW_AVE,      <, 0.5,        , false
         filter = twoStepActive,     "TWO Step Active" ,   TWO_STEP_FILT,      >,   0,     false
         filter = threeStepActive, "Three Step Active" , THREE_STEP_FILT,      >,   0,     false

         filter = std_Custom ; Standard Custom Expression Filter.
         ;filter = std_Expression, "Table Inactive"    , { (status1 & 0b00100000)}, false

    ;    tableName,  lambdaTargetTableName, lambdaChannel, egoCorrectionChannel, activeCondition
     veAnalyzeMap = vealTable3Tbl, LambdaTable3Tbl, avgLambda, avgO2Corr, {((MAP_INDEX_MODE == 4) && (MAX_TIMED_MAPS >= 3)) || ((MAP_INDEX_MODE == 3) && (MAX_NUM_OF_GEARS >= 3)) || ((MAP_INDEX_MODE == 1) && (FSL_INDEX == 2)) || ((MAP_INDEX_MODE == 0) && (SELECTED_MANUAL_MAP == 3)) || (FSL_INDEX_DAQ == 3) }

         lambdaTargetTables = LambdaTable1Tbl, LambdaTable2Tbl, LambdaTable3Tbl, LambdaTable4Tbl, afrTSCustom
         
         ; Optional Lambda targets to over-ride the afr table lookups
         lambdaTargetChannels = LAM_TARG
         
         ; All Available ecoCorrectionChannels
         egoCorrectionChannels = avgO2Corr, RO2_CORR, LO2_CORR, avgRIMCorr, LAMBDA_CORR_CYL_1, LAMBDA_CORR_CYL_2, LAMBDA_CORR_CYL_3, LAMBDA_CORR_CYL_4, LAMBDA_CORR_CYL_5, LAMBDA_CORR_CYL_6, LAMBDA_CORR_CYL_7, LAMBDA_CORR_CYL_8
         

       ; filter =  Name,        "DisplayName", outputChannel, operator, defaultVal, userAdjustable
        ;filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
        ;filter = maxRPMFilter, "Maximum RPM", rpm,           >       , 18000,    , true 
       
         filter = std_xAxisMin ; Auto build with appropriate axis channels
         filter = std_xAxisMax ; Auto build with appropriate axis channels
         filter = std_yAxisMin ; Auto build with appropriate axis channels
         filter = std_yAxisMax ; Auto build with appropriate axis channels

         filter = std_DeadLambda ; Auto build

         filter = minCltFilter, "Minimum CLT", TCLT_F_FILT,       <       , 160,      , true

         ;;filter = std_Expression, "Accel Enrichment"    , { abs(MAP_FILT - historicalValue(MAP_FILT, 50)) > 10 }, false
         filter = std_Expression, "Accel Enrichment"    , { ASYNC_PULSE_BCP > 0   || historicalValue(ASYNC_PULSE_BCP , 5) > 0}, false

         ; this works, just another way to skin a cat
         filter = overrunFilter,              "Overrun",     INJ_GPW_AVE,      <, 0.5,        , false
         filter = twoStepActive,     "TWO Step Active" ,   TWO_STEP_FILT,      >,   0,     false
         filter = threeStepActive, "Three Step Active" , THREE_STEP_FILT,      >,   0,     false

         filter = std_Custom ; Standard Custom Expression Filter.
         ;filter = std_Expression, "Table Inactive"    , { (status1 & 0b00100000)}, false

    ;    tableName,  lambdaTargetTableName, lambdaChannel, egoCorrectionChannel, activeCondition
     veAnalyzeMap = vealTable4Tbl, LambdaTable4Tbl, avgLambda, avgO2Corr, {((MAP_INDEX_MODE == 4) && (MAX_TIMED_MAPS >= 4)) || ((MAP_INDEX_MODE == 3) && (MAX_NUM_OF_GEARS >= 4)) || ((MAP_INDEX_MODE == 1) && (FSL_INDEX == 3)) || ((MAP_INDEX_MODE == 0) && (SELECTED_MANUAL_MAP == 4)) || (FSL_INDEX_DAQ == 4) }

         lambdaTargetTables = LambdaTable1Tbl, LambdaTable2Tbl, LambdaTable3Tbl, LambdaTable4Tbl, afrTSCustom
         
         ; Optional Lambda targets to over-ride the afr table lookups
         lambdaTargetChannels = LAM_TARG
         
         ; All Available ecoCorrectionChannels
         egoCorrectionChannels = avgO2Corr, RO2_CORR, LO2_CORR, avgRIMCorr, LAMBDA_CORR_CYL_1, LAMBDA_CORR_CYL_2, LAMBDA_CORR_CYL_3, LAMBDA_CORR_CYL_4, LAMBDA_CORR_CYL_5, LAMBDA_CORR_CYL_6, LAMBDA_CORR_CYL_7, LAMBDA_CORR_CYL_8
         

       ; filter =  Name,        "DisplayName", outputChannel, operator, defaultVal, userAdjustable
        ;filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
        ;filter = maxRPMFilter, "Maximum RPM", rpm,           >       , 18000,    , true 
       
         filter = std_xAxisMin ; Auto build with appropriate axis channels
         filter = std_xAxisMax ; Auto build with appropriate axis channels
         filter = std_yAxisMin ; Auto build with appropriate axis channels
         filter = std_yAxisMax ; Auto build with appropriate axis channels

         filter = std_DeadLambda ; Auto build

         filter = minCltFilter, "Minimum CLT", TCLT_F_FILT,       <       , 160,      , true

         ;;filter = std_Expression, "Accel Enrichment"    , { abs(MAP_FILT - historicalValue(MAP_FILT, 50)) > 10 }, false
         filter = std_Expression, "Accel Enrichment"    , { ASYNC_PULSE_BCP > 0   || historicalValue(ASYNC_PULSE_BCP , 5) > 0}, false

         ; this works, just another way to skin a cat
         filter = overrunFilter,              "Overrun",     INJ_GPW_AVE,      <, 0.5,        , false
         filter = twoStepActive,     "TWO Step Active" ,   TWO_STEP_FILT,      >,   0,     false
         filter = threeStepActive, "Three Step Active" , THREE_STEP_FILT,      >,   0,     false

         filter = std_Custom ; Standard Custom Expression Filter.
         ;filter = std_Expression, "Table Inactive"    , { (status1 & 0b00100000)}, false

    ; TRIM Table Analyze
    trimAnalyzeMap = G1CYL1ICFTable, LambdaTable1Tbl, avgLambda, avgO2Corr, {(MAP_INDEX_MODE >= 2)|| ((MAP_INDEX_MODE == 0) && (SELECTED_MANUAL_MAP = 1)) || ((MAP_INDEX_MODE == 1) && (FSL_INDEX == 0)) || (FSL_INDEX_DAQ == 1)}
        lambdaTargetTables = LambdaTable1Tbl, LambdaTable2Tbl, LambdaTable3Tbl, LambdaTable4Tbl, afrTSCustom
         
         ; Optional Lambda targets to over-ride the afr table lookups
        lambdaTargetChannels = LAM_TARG
         
         ; All Available ecoCorrectionChannels
        egoCorrectionChannels = avgO2Corr, RO2_CORR, LO2_CORR, avgRIMCorr, LAMBDA_CORR_CYL_1, LAMBDA_CORR_CYL_2, LAMBDA_CORR_CYL_3, LAMBDA_CORR_CYL_4, LAMBDA_CORR_CYL_5, LAMBDA_CORR_CYL_6, LAMBDA_CORR_CYL_7, LAMBDA_CORR_CYL_8
        
        lambdaChannels = RO2_LAMBDA, LO2_LAMBDA, RIM_LAMBDA_CYL_1, RIM_LAMBDA_CYL_2, RIM_LAMBDA_CYL_3, RIM_LAMBDA_CYL_4, RIM_LAMBDA_CYL_5, RIM_LAMBDA_CYL_6, RIM_LAMBDA_CYL_7, RIM_LAMBDA_CYL_8

         ; All Available ecoCorrectionChannels
         ;egoCorrectionChannels = egocor1, egocor2, egocor3, egocor4, egocor5, egocor6, egocor7, egocor8, egocor9, egocor10, egocor11, egocor12, egocor13, egocor14, egocor15, egocor16
        egoCorrectionChannels = LO2_CORR, RO2_CORR, LAMBDA_CORR_CYL_1, LAMBDA_CORR_CYL_2, LAMBDA_CORR_CYL_3, LAMBDA_CORR_CYL_4, LAMBDA_CORR_CYL_5, LAMBDA_CORR_CYL_6, LAMBDA_CORR_CYL_7, LAMBDA_CORR_CYL_8

        option = disableMaxPercentLimit 
        zAxisTransform = 100

        ;trimTable = tableName, label, afrChannel, egoCorr,  enableCondition
        ; or
        ;trimTable = tableName, label, egoSensorIndexEpression,  enableCondition
        trimTable = G1CYL1ICFTable, "G1_Cyl1_ICF Table", RIM_LAMBDA_CYL_1, LAMBDA_CORR_CYL_1, { GENERIC_NUM_CYLINDERS > 0  } 
        trimTable = G1CYL2ICFTable, "G1_Cyl2_ICF Table", RIM_LAMBDA_CYL_2, LAMBDA_CORR_CYL_2, { GENERIC_NUM_CYLINDERS > 1  } 
        trimTable = G1CYL3ICFTable, "G1_Cyl3_ICF Table", RIM_LAMBDA_CYL_3, LAMBDA_CORR_CYL_3, { GENERIC_NUM_CYLINDERS > 2  } 
        trimTable = G1CYL4ICFTable, "G1_Cyl4_ICF Table", RIM_LAMBDA_CYL_4, LAMBDA_CORR_CYL_4, { GENERIC_NUM_CYLINDERS > 3  } 
        trimTable = G1CYL5ICFTable, "G1_Cyl5_ICF Table", RIM_LAMBDA_CYL_5, LAMBDA_CORR_CYL_5, { GENERIC_NUM_CYLINDERS > 4  } 
        trimTable = G1CYL6ICFTable, "G1_Cyl6_ICF Table", RIM_LAMBDA_CYL_6, LAMBDA_CORR_CYL_6, { GENERIC_NUM_CYLINDERS > 5  } 
        trimTable = G1CYL7ICFTable, "G1_Cyl7_ICF Table", RIM_LAMBDA_CYL_7, LAMBDA_CORR_CYL_7, { GENERIC_NUM_CYLINDERS > 6  } 
        trimTable = G1CYL8ICFTable, "G1_Cyl8_ICF Table", RIM_LAMBDA_CYL_8, LAMBDA_CORR_CYL_8, { GENERIC_NUM_CYLINDERS > 7  } 

        filter = std_xAxisMin ; Auto build with appropriate axis channels
        filter = std_xAxisMax ; Auto build with appropriate axis channels
        filter = std_yAxisMin ; Auto build with appropriate axis channels
        filter = std_yAxisMax ; Auto build with appropriate axis channels

        filter = std_DeadLambda ; Auto build

        filter = minCltFilter, "Minimum CLT", TCLT_F_FILT,       <       , 160,      , true

         ;;filter = std_Expression, "Accel Enrichment"    , { abs(MAP_FILT - historicalValue(MAP_FILT, 50)) > 10 }, false
        filter = std_Expression, "Accel Enrichment"    , { ASYNC_PULSE_BCP > 0   || historicalValue(ASYNC_PULSE_BCP , 5) > 0}, false

         ; this works, just another way to skin a cat
        filter = overrunFilter,              "Overrun",     INJ_GPW_AVE,      <, 0.5,        , false
        filter = twoStepActive,     "TWO Step Active" ,   TWO_STEP_FILT,      >,   0,     false
        filter = threeStepActive, "Three Step Active" , THREE_STEP_FILT,      >,   0,     false

        filter = std_Custom ; Standard Custom Expression Filter.

         
