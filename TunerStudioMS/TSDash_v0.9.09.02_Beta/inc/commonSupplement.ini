
[OutputChannels]
   
   ;testAccumulate = { lastValue(rpm) >= 0 ? rpm + lastValue(testAccumulate) : rpm }
   ;testAccumulate = { accumulate( rpm ) }
   ;lagRpm = { pastValue(rpm, 20) }
   ;testTimeNow = { timeNow }
   ;testGPS = { GPS.gpsSpeedKPH }
   

   
   ; Common to all
   ; create TS fields with normalized values.
   ; Normalized weight should be in lbs.
   tsVehicleWeightLbs = { tsWeightUnits == 1 ? tsVehicleWeight * 2.20462 : tsVehicleWeight }
   ; normalize frontal area to m^2
   tsFrontalAreaMsq = { tsFrontalUnits == 0 ? tsFrontalArea / 10.7639104 : tsFrontalArea }
   
   tsInputSpeedMPH = { isNan(tsVehicleSpeedMph) ? 0 : tsVehicleSpeedMph }, "MPH", hidden ; insure a valid number

   tsVehicleSpeedKph = { tsInputSpeedMPH / 0.6214 }, "KPH"
   tsVehicleSpeedMps = { tsInputSpeedMPH * 0.44704 }, "m/s"

   deltatime = { lastValue(timeNow()) >= 0 && timeNow() - lastValue(timeNow()) < 2000 ? timeNow() - lastValue(timeNow()) : 0 }, "s"
   ;deltatimeWide = { historicalValue(timeNow(), 3) >= 0 ? timeNow() - historicalValue(timeNow(), 3) : 0 }, "s", hidden
   
   tsDistanceTraveledMiles = { accumulate( (tsInputSpeedMPH / 3600) * (deltatime) ) }, "Miles"
   tsDistanceTraveledMilesStored = { persistentAccumulate( (tsInputSpeedMPH / 3600) * (deltatime) ) }, "Miles"
   tsDistanceTraveledFeet = { tsDistanceTraveledMiles * 5280 }, "ft"
   tsDistanceTraveledKilometers = { tsDistanceTraveledMiles * 1.60934}, "km"
   tsDistanceTraveledKilometersStored = { persistentAccumulate( (tsInputSpeedMPH  * 1.60934 / 3600) * (deltatime) )}, "km"
   
   tsHpLagSize = { 3 }, "rec", hidden
   
   tsSmoothSpeed = { SmoothFiltered(tsInputSpeedMPH) }, "MPH", hidden
   tsMetersPerSecond = { tsSmoothSpeed * 0.44704 }
   tsAeroDragHp = { aerodynamicDragHp(tsMetersPerSecond, 1.2041, tsVehicleDragCoef, tsFrontalAreaMsq) }, "HP"
   tsRollingDragHp = { rollingDragHp(tsSmoothSpeed, tsTirePressure, tsVehicleWeightLbs) }, "HP"
  
; Good working MLV formulas
;FilteredMPH:
;smoothFiltered([MPH])

;SmoothDeltaMPH2:
;[FilteredMPH]-[FilteredMPH-1]

;AccelHP:
;SmoothFiltered(accelHp([FilteredMPH], SmoothDeltaMPH2, deltaTime, 3450))

   ; these can be tuned for smoother output.
   tsSmoothLastSpeed = { lastValue(tsSmoothSpeed) }, "MPH", hidden
   tsDeltaSpeed = { tsSmoothSpeed - tsSmoothLastSpeed }, "MPH", hidden
   

   tsAccelHp = { SmoothFiltered(accelHp(tsSmoothSpeed, tsDeltaSpeed, deltatime, tsVehicleWeightLbs)) }, "HP" ; 
   
   tsNetHP = { SmoothBasic(tsAccelHp + tsRollingDragHp + tsAeroDragHp, 3) }, "HP" 
   tsNetTq = { tsSmoothRPM > 100 ? tsNetHP*5252/tsSmoothRPM : 0 }, "lbft"

   tsFuelFlowLBph = { tsFuelFlow / 10.5 }, "lb/hr"
   tsGallonWeight = { tsFuelConsumptionUnits == 1 ? 7.29 : 6.073 }, "lb", hidden
   tsFuelFlowGph = { tsFuelFlowLBph / tsGallonWeight }, "GPH"
   tsFuelFlowLph = { tsFuelFlowGph * 3.78541 }, "l/hr"
   
   tsGallonsUsed = { accumulate( deltatime < 1000 ? (tsFuelFlowGph*(deltatime/3600)) : 0 ) }, "Gal"
   ;tsGallonsUsed = { (tsFuelFlowGph*(deltatime/3600)) }, "Gal"
   tsGallonsUsedStored = { persistentAccumulate( deltatime < 1000 ? (tsFuelFlowGph*(deltatime/3600)) : 0 ) }, "Gal"
   tsLitersUsed = { tsGallonsUsed * 3.78541 }, "Liters"
   tsLitersUsedStored = { tsGallonsUsedStored * 3.78541 }, "Liters"
   
   
   tsGallUsedMPG = { accumulate( (tsFuelFlowGph * ( deltatime/3600))) }, "Gal", hidden
   tsDistTraveledMPG = { accumulate( ( tsInputSpeedMPH / 3600) * ( deltatime ) ) }, "Miles", hidden
   avgMPG = { tsGallonsUsed > 0 ? tsDistanceTraveledMiles/tsGallonsUsed : 0}, "MPG"
   ;avgMPG = { tsGallonsUsedStored > 0 ? tsDistanceTraveledMilesStored/tsGallonsUsedStored : 0}, "MPG"
   ;avgMPG = { tsGallUsedMPG > 0 ? tsDistTraveledMPG/tsGallUsedMPG : 0}, "MPG"

   instantMPG = { (pulseWidth1 == 0 || tsFuelFlowGph == 0) ? 99 : tsInputSpeedMPH/tsFuelFlowGph }, "MPG"
   
   avgMPL = { tsLitersUsed > 0 ? tsDistanceTraveledMiles/tsLitersUsed : 0 }, "Miles/L"
   ;avgMPL = { tsLitersUsedStored > 0 ? tsDistanceTraveledMilesStored/tsLitersUsed : 0 }, "Miles/L"
   instantMPL = { pulseWidth1 == 0 ? 49 : tsInputSpeedMPH/tsFuelFlowLph }, "Miles/L"
   

   avgKmPL = { tsLitersUsed > 0 ? tsDistanceTraveledKilometers / tsLitersUsed : 0}, "Km/L"
   ;avgKmPL = { tsLitersUsedStored > 0 ? tsDistanceTraveledKilometersStored / tsLitersUsedStored : 0}, "Km/L"
   instantKmPL = { pulseWidth1 == 0 || tsVehicleSpeedKph < 1 ? 0 : tsVehicleSpeedKph/tsFuelFlowLph }, "Km/L"
   
   avgLp100Km = { avgKmPL > 0 && tsDistanceTraveledKilometers > 0 ? 100/avgKmPL : 0 }, "l/100Km"
   ; having underlying persistentAccumulate() channels doesn't work.
   ;avgLp100Km = { avgKmPL > 0 && tsDistanceTraveledKilometersStored > 0 ? 100/avgKmPL : 0 }, "l/100Km"
   instantLp100Km = { instantKmPL > 0 ? 100 / instantKmPL : 0 }, "l/100Km"

   deadValue = { 0 }
   
   userSpeedMph = { (tsTireDiameter*tsWorkingRpm)/(335.675*tsFinalDriveRatio*tsTransGearRatio) }, "MPH" ; 

   zeroTo30MPH =  { timeToExceed(30,  tsInputSpeedMPH) }, "s", { isUltraFunctionsAvaliable() }
   zeroTo60MPH =  { timeToExceed(60,  tsInputSpeedMPH) }, "s", { isUltraFunctionsAvaliable() }
   zeroTo100MPH = { timeToExceed(100, tsInputSpeedMPH) }, "s", { isUltraFunctionsAvaliable() }

   etDistanceFt = { accumulate( (tsInputSpeedMPH / 3600) * deltatime * 5280) > tsEtRollOut / 12 ? accumulate( (tsInputSpeedMPH / 3600) * deltatime * 5280) : 0 }, "ft",  { isUltraFunctionsAvaliable() }

   timeTo60Ft   = { timeToExceed(  60, etDistanceFt ) }, "s",  { isUltraFunctionsAvaliable() }
   timeTo330Ft  = { timeToExceed( 330, etDistanceFt ) }, "s",  { isUltraFunctionsAvaliable() }
   timeTo660Ft  = { timeToExceed( 660, etDistanceFt ) }, "s",  { isUltraFunctionsAvaliable() }
   timeTo1320Ft = { timeToExceed(1320, etDistanceFt ) }, "s",  { isUltraFunctionsAvaliable() }
   timeTo5280Ft = { timeToExceed(5280, etDistanceFt ) }, "s",  { isUltraFunctionsAvaliable() }

   speedAt60Ft   = { timeToExceed(  60, etDistanceFt , systemTime(),  tsInputSpeedMPH ) }, "s",  { isUltraFunctionsAvaliable() }
   speedAt330Ft  = { timeToExceed( 330, etDistanceFt , systemTime(),  tsInputSpeedMPH ) }, "s",  { isUltraFunctionsAvaliable() }
   speedAt660Ft  = { timeToExceed( 660, etDistanceFt , systemTime(),  tsInputSpeedMPH ) }, "s",  { isUltraFunctionsAvaliable() }
   speedAt1320Ft = { timeToExceed(1320, etDistanceFt , systemTime(),  tsInputSpeedMPH ) }, "s",  { isUltraFunctionsAvaliable() }
   speedAt5280Ft = { timeToExceed(5280, etDistanceFt , systemTime(),  tsInputSpeedMPH ) }, "s",  { isUltraFunctionsAvaliable() }

   perfFuncActive = { isUltraFunctionsAvaliable() }, "on/off"
   perfFuncInactive = { !isUltraFunctionsAvaliable() }, "on/off"

   ;accumulate( (tsInputSpeedMPH / 3600) * (deltatime) )
[GaugeConfigurations]

  ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld

gaugeCategory = "Trip / Economy"
    gaugeAvgMPG                = avgMPG,        "Average fuel economy",      "MPG", 0, 30,  -1, -1, 99, 99, 1, 1
    gaugeInstantMPG            = instantMPG,    "Instant fuel economy",      "MPG", 0, 100, -1, -1, 99, 99, 1, 1
    gaugeAvgMilesLiter         = avgMPL,        "Average fuel economy",      "Miles/Liter", 0, 20,  -1, -1, 49, 49, 1, 1
    gaugeInstantMilesLiter     = instantMPL,    "Instant fuel economy",      "Miles/Liter", 0, 50, -1, -1, 49, 49, 1, 1
    gaugeAvgKmLiter            = avgKmPL,       "Average fuel economy",      "Km/Liter", 0, 20,  -1, -1, 49, 49, 1, 1
    gaugeInstantKmLiter        = instantKmPL,   "Instant fuel economy",      "Km/Liter", 0, 50, -1, -1, 49, 49, 1, 1
    gaugeAvgLiterPer100Km      = avgLp100Km,    "Average fuel economy",      "l/100Km", 50, 0,  -1, -1, 99, 99, 1, 1
    gaugeInstantLiterPer100Km  = instantLp100Km,"Instant fuel economy",      "l/100Km", 250, 0, -1, -1, 100, 200, 1, 1
    
    gaugeTripMeterMiles        = tsDistanceTraveledMiles, "Trip Meter", "Miles", 0, 100, -1, -1, 1000, 1000, 2, 1
    gaugeTripMeterKM           = tsDistanceTraveledKilometers, "Trip Meter", "km", 0, 100, -1, -1, 1000, 1000, 2, 1

    gaugeOdometeMiles          = tsDistanceTraveledMilesStored, "Odometer", "Miles", 0, 0, -1, -1, 10000000, 10000000, 1, 1
    gaugeOdometerKM            = tsDistanceTraveledKilometersStored, "Odometer", "km", 0, 0, -1, -1, 10000000, 10000000, 1, 1

    gaugeFuelFlowLbHr          = tsFuelFlowLph, "Fuel Flow", "lb/hr", 0, 400, -1, -1, 350, 400, 1, 0
    gaugeFuelFlowGallonHr      = tsFuelFlowGph, "Fuel Flow", "Gallon/hr", 0, 50, -1, -1, 40, 45, 1, 1
    gaugeFuelFlowCCPerMin      = tsFuelFlow,    "Fuel Flow", "cc/min", 0, 3000, -1, -1, 2000, 2500, 0, 0

    gaugeFuelGallonsUsed       = tsGallonsUsedStored, "Fuel Used",  "Gallons", 0, 50, -1, -1, 50, 50, 3, 3
    gaugeFuelLitersUsed        = tsLitersUsedStored,  "Fuel Used",   "liters", 0, 100, -1, -1, 100, 105, 3, 3

gaugeCategory = "Power & Performance"
    gaugeTsAeroHp              = tsAeroDragHp,  "Aerodynamic Drag", "HP", 0, 300, -1, -1, 200, 250, 0, 0
    gaugeTsRollingHp           = tsRollingDragHp,   "Rolling Drag", "HP", 0, 100, -1, -1, 75, 90, 0, 0
    gaugeTsHp                  = tsNetHP,  "Net Power",       "HP", -50, 500, -1, -1, 400, 450, 0, 0
    gaugeTsTq                  = tsNetTq,  "Net Torque",    "lbft", -50, 500, -1, -1, 400, 450, 0, 0
    gaugeZeroTo30              = zeroTo30MPH,  "Zero to 30 MPH",    "s", 0, 15, -1, -1, 3,  6, 0, 0, { perfFuncActive }
    gaugeZeroTo60              = zeroTo60MPH,  "Zero to 60 MPH",    "s", 0, 15, -1, -1, 5, 10, 0, 0, { perfFuncActive }
    gaugeZeroTo100             = zeroTo100MPH, "Zero to 100 MPH",   "s", 0, 15, -1, -1, 12, 18, 0, 0, { perfFuncActive }
    gauge60ftTime              = timeTo60Ft, "60ft Time",           "s", 0,  3, -1, -1, 12, 18, 0, 0, { perfFuncActive }
    gauge330ftTime             = timeTo330Ft, "330ft Time",         "s", 0,  8, -1, -1, 12, 18, 0, 0, { perfFuncActive }
    gauge660ftTime             = timeTo660Ft, "660ft Time",         "s", 0, 12, -1, -1, 12, 18, 0, 0, { perfFuncActive }
    gauge1320ftTime            = timeTo1320Ft, "1320ft Time",       "s", 0, 18, -1, -1, 18, 20, 0, 0, { perfFuncActive }
    gauge5280ftTime            = timeTo5280Ft, "5280ft Time",       "s", 0, 40, -1, -1, 40, 40, 0, 0, { perfFuncActive }
    gauge60ftSpeed             = speedAt60Ft, "60ft Speed",       "MPH", 0, 80, -1, -1, 80, 80, 0, 0, { perfFuncActive }
    gauge330ftSpeed            = speedAt330Ft, "330ft Speed",     "MPH", 0,120, -1, -1, 120,120, 0, 0, { perfFuncActive }
    gauge660ftSpeed            = speedAt660Ft, "660ft Speed",     "MPH", 0,150, -1, -1, 150,150, 0, 0, { perfFuncActive }
    gauge1320ftSpeed           = speedAt1320Ft, "1320ft Speed",   "MPH", 0,180, -1, -1, 180,180, 0, 0, { perfFuncActive }
    gauge5280ftSpeed           = speedAt5280Ft, "5280ft Speed",   "MPH", 0,220, -1, -1, 220,220, 0, 0, { perfFuncActive }


[Datalog]
   entry = avgMPG,       "Trip Economy",      float,  "%.1f", { tsInjectorSize && (tsFuelConsumptionUnits==0 || tsFuelConsumptionUnits == 1) }
   entry = instantMPG,   "Instant Economy",   float,  "%.1f", { tsInjectorSize && (tsFuelConsumptionUnits==0 || tsFuelConsumptionUnits == 1) }
   entry = tsFuelFlowGph,"Fuel Consumption",  float,  "%.1f", { tsInjectorSize && (tsFuelConsumptionUnits==0 || tsFuelConsumptionUnits == 1) }
   entry = tsFuelFlow,   "Fuel Flow cc",      float,  "%.1f", { tsInjectorSize && (tsFuelConsumptionUnits==0 || tsFuelConsumptionUnits == 1) }
   entry = tsFuelFlowLph,"Fuel Flow lph",     float,  "%.1f", { tsInjectorSize && (tsFuelConsumptionUnits==0 || tsFuelConsumptionUnits == 1) }

   entry = tsGallUsedMPG,"Gallons Used",      float,  "%.1f", { tsInjectorSize && (tsFuelConsumptionUnits==0 || tsFuelConsumptionUnits == 1) }
   entry = tsLitersUsed,  "Liters Used",      float,  "%.1f", { tsInjectorSize && tsFuelConsumptionUnits == 3 }

   entry = avgMPL,       "Trip Economy",      float,  "%.1f", { tsInjectorSize && tsFuelConsumptionUnits==2 && tsDistanceUnits == 0 }
   entry = instantMPL,   "Instant Economy",   float,  "%.1f", { tsInjectorSize && tsFuelConsumptionUnits==2 && tsDistanceUnits == 0 }

   entry = avgLp100Km,       "Trip Economy",     float,  "%.1f", { tsInjectorSize && tsFuelConsumptionUnits==2 && tsDistanceUnits == 1 }
   entry = instantLp100Km,   "Instant Economy",  float,  "%.1f", { tsInjectorSize && tsFuelConsumptionUnits==2 && tsDistanceUnits == 1 }
   
   entry = tsLitersUsed, "Fuel Consumption",  float,  "%.1f", {tsInjectorSize && tsFuelConsumptionUnits==2 }

   entry = tsDistanceTraveledMiles,"Trip Meter Miles",  float,  "%.2f", { tsDistanceUnits == 0 }
   entry = tsDistanceTraveledKilometers,"Trip Meter Km",  float,  "%.2f", { tsDistanceUnits == 1 }

   entry = tsDistanceTraveledMilesStored,"Odometer Miles",  float,  "%.2f", { tsDistanceUnits == 0 }
   entry = tsDistanceTraveledKilometersStored,"Odometer Km",  float,  "%.2f", { tsDistanceUnits == 1 }

   entry = tsInputSpeedMPH,  "MPH",  float,  "%.2f"

   entry = tsAeroDragHp, "Aerodynamic Drag",  float,  "%.1f", {tsLogPowerFields > 1 && tsVehicleDragCoef && tsVehicleWeight }, { tsHpLagSize } ; shift by tsHpLagSize.
   entry = tsRollingDragHp,  "Rolling Drag",  float,  "%.1f", {tsLogPowerFields > 1 && tsVehicleDragCoef && tsVehicleWeight }, { tsHpLagSize } 
   entry = tsAccelHp,         "Accel Power",  float,  "%.1f", {tsLogPowerFields > 1 && tsVehicleDragCoef && tsVehicleWeight }, { tsHpLagSize } 
   entry = tsNetHP,                 "Power",  float,  "%.1f", {tsLogPowerFields && tsVehicleDragCoef && tsVehicleWeight }, { tsHpLagSize } 
   entry = tsNetTq,                "Torque",  float,  "%.1f", {tsLogPowerFields && tsVehicleDragCoef && tsVehicleWeight }, { tsHpLagSize } 
   entry = zeroTo30MPH,          "ZeroTo30",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = zeroTo60MPH,          "ZeroTo60",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = zeroTo100MPH,        "ZeroTo100",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = timeTo60Ft,            "60ft ET",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = timeTo330Ft,          "330ft ET",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = timeTo660Ft,          "660ft ET",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = timeTo1320Ft,        "1320ft ET",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = timeTo5280Ft,        "5280ft ET",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = speedAt60Ft,          "60ft MPH",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = speedAt330Ft,        "330ft MPH",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = speedAt660Ft,        "660ft MPH",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = speedAt1320Ft,      "1320ft MPH",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = speedAt5280Ft,      "5280ft MPH",  float,  "%.2f", {tsLogPerfFields && isUltraFunctionsAvaliable()}
   entry = tsDistanceTraveledMilesStored,  "Odometer_Miles",  float,  "%.1f", {  tsDistanceUnits == 0}
   entry = tsDistanceTraveledKilometersStored,  "Odometer_KM",  float,  "%.1f", { tsDistanceUnits ==1 }


[PcVariables]

    tsPrimaryInjectorSize     = scalar,  U16,  "",  1.00, 0.00, 0.00, 15000.0,      0 ;
    tsInjSizeConstant         =   bits,  U08,   [0:0], "lb/hr", "cc/min"
    tsLogPowerFields          =   bits,  U08,   [0:1], "Off", "Log HP & Tq", "Log HP, Tq & Drag", "INVALID"
    tsLogPerfFields           =   bits,  U08,   [0:0], "Off", "Log time to speed & distance"
    tsFuelConsumptionUnits    =   bits,  U08,   [0:1], "US Gallons", "Imperial Gallons", "Liters", "INVALID"
    tsDistanceUnits           =   bits,  U08,   [0:0], "Miles Per Hour", "Kilometers Per Hour"
    tsVehicleWeight           = scalar,  U16,  "",  1.00, 0.00, 0.00, 32000.0,      0 ;
    tsWeightUnits             =   bits,  U08,   [0:0], "lbs", "kg"
    tsVehicleDragCoef         = scalar,  U16,  "",  0.01, 0.00, 0.00, 2.0,      2 ;
    tsTirePressure            = scalar,  U16,  "psi",  1.00, 0.00, 0.00, 200.0,      0 ;
    tsFrontalArea             = scalar,  U16,  "",  0.10, 0.00, 0.00, 200.0,      1 ;
    tsFrontalUnits            =   bits,  U08,   [0:0], "sqft", "m^2"
    tsShiftHpInLogs           = scalar,  U16,  "",  1.0, 0.00, 0.00, 30.0,      0 ;
    
    tsTireDiameter            = scalar,  U16,  "in",  0.1, 0.00, 0.00, 200.0,      1 ;
    tsTransGearRatio          = scalar,  U16,  ":1",  0.01, 0.00, 0.00, 30.0,      2 ;
    tsFinalDriveRatio         = scalar,  U16,  ":1",  0.01, 0.00, 0.00, 30.0,      2 ;
    tsEtRollOut               = scalar,  U16,  "in",  1.0 , 0.00, 0.00, 50.0,      0 ;


[ConstantsExtensions]
    defaultValue = tsPrimaryInjectorSize, 0 ; 378 = 30lb/hr
    defaultValue = tsInjSizeConstant, 1
    defaultValue = tsFuelConsumptionUnits, 0
    defaultValue = tsDistanceUnits, 0
    defaultValue = tsVehicleWeight, 3450
    defaultValue = tsWeightUnits, 0
    defaultValue = tsVehicleDragCoef, 0.34
    defaultValue = tsTirePressure, 32
    defaultValue = tsFrontalArea, 19.3
    defaultValue = tsFrontalUnits, 0
    defaultValue = tsLogPowerFields, 1
    defaultValue = tsTireDiameter, 25.5
    defaultValue = tsTransGearRatio, 1.0
    defaultValue = tsFinalDriveRatio, 3.7
    defaultValue = tsEtRollOut, 0
    defaultValue = tsLogPerfFields, 0
    
    
[SettingContextHelp]
    tsFuelConsumptionUnits = "Preferred units to log and display Fuel Consumption information in."
    tsDistanceUnits = "Preferred Units to display and log speed data."
    tsFrontalArea = "Frontal cross section of vehicle, these values van typically be found on the Internet for your particular vehicle."
    tsFrontalUnits = "The units that you have entered Frontal Area in, either sq ft or m^2, these values can typically be found on the Internet for your particular vehicle."
    tsVehicleDragCoef = "The drag coefficient for your vehicle, these values can typically be found on the Internet for your particular vehicle."
    tsTirePressure = "Tire pressure your run your vehicle with"
    tsVehicleWeight = "Gross vehicle weight including driver and fluids."
    tsWeightUnits = "Select the units you have entered weight as. kg or lbs, either is valid when this is set accordingly."
    tsShiftHpInLogs = "Due to latency in some speed sensors such as GPS, it may be desirable to shift the HP fields in the logs to help align this with the correlated fields."
    tsLogPowerFields = "Enable or disable data logging Power values to your data logs by default.\n - Off - no Power Fields will be data logged.\n - Log HP & Tq - Only Net Power and Torque will be logged.\n - Log HP, Tq and Accel Times - Net Power and Torque will be logged along with time to speed and time to distance fields (0-60, 1/4 mile, etc). Note: Accel times are only available if your application edition supports them.  \n - Log HP, Tq, Accel Times & Drag - Along with Power, Torque and Accel Time (if available), The components that make up Power will be logged individually (Aerodynamic Drag HP, Rolling Drag HP and Accel HP)"
    tsEtRollOut = "Rollout distance is used for Time to Distance calculations. This is the Rollout distance the car travels before it breaks the beam. At a drag strip there the car will typically travel a certain distance before tripping the start beam. In the real world this is typically 8-12 inches, this distance will include moving through the beam, but also loading of the suspension, tire reaction, etc. However, as in this case we are using pulse based sensors to measure movement, we have found roll out can become more or less canceled out and 0 can work fine. To get the true rollout for your vehicle it is advised to compare with a drag strip."
    tsLogPerfFields = "Enable or disable logging of time to speed and time to distance measurements found on the Acceleration Performance Dash."